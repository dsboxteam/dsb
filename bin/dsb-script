#!/usr/bin/env bash
#
#  Run Dsb script

set -e

DSBLIB_TEMP="$( declare -F )"
if [ -n "$DSBLIB_TEMP" ]; then
    DSBLIB_TEMP_EOL=$'\n'
    DSBLIB_TEMP_LINE=
    while [ "$DSBLIB_TEMP_LINE" != "$DSBLIB_TEMP" ]; do
        DSBLIB_TEMP_LINE="${DSBLIB_TEMP%%${DSBLIB_TEMP_EOL}*}"
        DSBLIB_TEMP="${DSBLIB_TEMP#*${DSBLIB_TEMP_EOL}}"
        unset "${DSBLIB_TEMP_LINE##* }"
    done
fi

# Include common functions and variables:
case "$OSTYPE" in
    linux* )
        if ! hash readlink 2>/dev/null ; then
            echo -e "${0##*/}: Сommand 'readlink' not found - EXECUTION ABORTED" 1>&2
            exit 100
        fi
        DSBLIB_TEMP="$( readlink -f "${BASH_SOURCE[0]}" )"
        ;;
    darwin*  ) # OSX
        if ! hash greadlink 2>/dev/null ; then
            echo -e "${0##*/}: Сommand 'greadlink' not found\nPlease install GNU coreutils package (brew install coreutils)\nEXECUTION ABORTED" 1>&2
            exit 100
        fi
        DSBLIB_TEMP="$( greadlink -f "${BASH_SOURCE[0]}" )"
        ;;
    bsd* ) # BSD
        if ! hash greadlink 2>/dev/null ; then
            echo -e "${0##*/}: Сommand 'greadlink' not found\nPlease install GNU coreutils package (pkg install coreutils)\nEXECUTION ABORTED" 1>&2
            exit 100
        fi
        DSBLIB_TEMP="$( greadlink -f "${BASH_SOURCE[0]}" )"
        ;;
    # solaris* ) # SOLARIS
    *)
        echo -e "${0##*/}: Unsupported OS Type: $OSTYPE - EXECUTION ABORTED" 1>&2
        exit 100
        ;;
esac
DSBLIB_TEMP="${DSBLIB_TEMP%/*}"
. "${DSBLIB_TEMP%/*}/lib/dsblib.bash"

if [ -z "$DSBLIB_LIB_OK" ]; then
    echo -e "${0##*/}: dsblib.bash is not active - EXECUTION ABORTED" 1>&2
    exit 100
fi

# Note: dsb-script -c option is used in 'dsb help'
if   [ "$1" = "-c" ]; then
    eval "$2"
    exit "$?"
fi

DSB_SCRIPT_PATH="$1"
if [ -z "$DSB_SCRIPT_PATH" ]; then
    #dsb_red_message    "${0##*/}: missing argument"
    dsb_yellow_message "Usage: ${DSBLIB_BINCMD} ( <bash_source_path> | -c <command_string> )"

    if [ "$( env dsb-script -c 'echo OK' )" != "OK" ]; then
        dsb_red_message "WARNING: The 'dsb-script' command is not available for the 'env' command.\nA possible reason is the use of the tilde character in the value of the PATH variable."
        dsb_error_exit
    fi
    dsblib_exit
fi

DSB_SCRIPT_NAME="${DSB_SCRIPT_PATH##*/}"
DSBLIB_BINCMD="$DSB_SCRIPT_NAME"

if [ ! -f "$DSB_SCRIPT_PATH" ]; then
    dsb_error_exit    "${0##*/}: File '${DSB_SCRIPT_PATH}' not found"
elif [ "${DSB_SCRIPT_PATH:0:1}" != "/" -o "${DSB_SCRIPT_PATH#*./}" != "$DSB_SCRIPT_PATH" -o "${DSB_SCRIPT_PATH#*//}" != "$DSB_SCRIPT_PATH" ]; then
    DSB_SCRIPT_PATH="$( MYTMP="${DSB_SCRIPT_PATH%/*}" ; cd -- "${MYTMP:-/}" ; echo "$PWD/$DSB_SCRIPT_NAME" )"
fi

shift

. "$DSB_SCRIPT_PATH"