#
#   Create .dsb directory
#

dsblib_which  md5sum

if [ "$#" -gt 0 ]; then
    dsb_yellow_message "Usage: $DSBLIB_DSBCMD"
    dsb_error_exit
fi

declare -r MYDIR="$( pwd -P )"
declare -r MYBOX="$MYDIR/.dsb"
declare -r MYGLOBALS="globals.yaml"

declare    MYPROJECTID="${RANDOM}|${MYDIR}"
if hash date ; then
    MYPROJECTID="$(  date +%s 2>/dev/null )|${MYPROJECTID}"
fi
MYPROJECTID="$( echo "${MYPROJECTID}" | md5sum - )"
MYPROJECTID="${MYPROJECTID:0:32}"

declare MYHOMEVOLS="# "
if [ DSB_HOME_VOLUMES = true -o "$DSBLIB_OSTYPE" != LINUX ]; then
    MYHOMEVOLS=
fi

if [ -d "$MYBOX" ]; then
    dsb_error_exit "Directory '$MYBOX' already exists" 
fi

if dsb_set_box --check ; then
    dsb_error_exit "The current directory is inside the Dsb root directory '$DSB_ROOT'\n"
fi

dsblib_check_compose_version

declare MYSTANDALONE='# '
if hash docker-compose > /dev/null 2>/dev/null ; then
    MYSTANDALONE=
fi

dsb_exec mkdir "$MYBOX"
dsb_exec cp -pPR "$DSBLIB_LIB"/init/. "$MYBOX"  # POSIX

declare MYMTU=$( docker network inspect bridge --format '{{index .Options "com.docker.network.driver.mtu"}}' )
MYMTU="${MYMTU:-1450}"

echo "#
# See https://docs.docker.com/compose/compose-file/06-networks/
#
networks:
  dsbnet:
    driver: bridge
    #
    # This is a workaround for the problem \"Containers in docker does not get same MTU as host\"
    # see: https://github.com/moby/moby/issues/22297
    #
    # You should also set appropriate MTU in the file /etc/docker/daemon.json:
    #
    # {
    #   \"mtu\": ${MYMTU}
    # }
    #
    driver_opts:
      com.docker.network.driver.mtu: ${MYMTU}
" > "$MYBOX/compose/$MYGLOBALS"


echo "#
#   Docker Compose & Dsb variables
#
#   This file is a Bash source file.
#   
#   See also:
#   https://tldp.org/LDP/abs/html/index.html
#   https://docs.docker.com/compose/environment-variables/envvars/
#
##################


#
#   Сustomize your project by defining additional Сompose .yaml files separated by ':'.
#   Example:
#
#       COMPOSE_FILE=\"${MYGLOBALS}:php.yaml:nginx.yaml\"
#
#   File '${MYGLOBALS}' is a must.
#
COMPOSE_FILE=\"${MYGLOBALS}\"


#   All Dsb projects must have different DSB_PROJECT_IDs on the host system.
#   Before changing the value of the DSB_PROJECT_ID variable,
#   remove all project containers and named volumes: dsb compose down -v
#
#   The variable value must only contain Latin letters A-Z, a-z, symbols '_', '-' and digits 0-9.
#
DSB_PROJECT_ID=\"${MYPROJECTID}\"


#   The variable is used as a mounted directory
#   in the yaml files generated by the 'dsb yaml' subcommand:
#
#    volumes:
#      - \$DSB_SPACE:/dsbspace
#
#   Default variable value is the fullpath to the Dsb root directory
#
# DSB_SPACE=\"\$DSB_ROOT\"


#   Enable standalone syntax 'docker-compose ...' to invoke Docker Compose CLI
#
${MYSTANDALONE}DSB_STANDALONE_SYNTAX=true


#   Uncomment this variable to enable Production Mode
#
# DSB_PROD_MODE=true


#   Specify the project service names for which the 'Mapping file paths in parameters' option is enabled.
#
#   Service names in the variable are separated by colons.
#   The asterisk is used to enable the option for all Dsb project services.
#
# DSB_ARGS_MAPPING=\"*\"


#   Uncomment this variable if you prefer to persist service home directories
#   via Docker named volumes.
#
#   NOTE: This variable is only used by the 'dsb yaml' subcommand.
#
${MYHOMEVOLS}DSB_HOME_VOLUMES=true


#   Container shutdown timeout in seconds
#
# DSB_SHUTDOWN_TIMEOUT=${DSB_SHUTDOWN_TIMEOUT}


#   File mode creation mask for 'dsb root', 'dsb sh', and Dsb scripts.
#   By default, the current umask value of the host system's command line is used.
#
# DSB_UMASK_ROOT=022
# DSB_UMASK_SH=002


#   Specify the project service names for Dsb scripts.
#
# DSB_SERVICE_MONGO=mongo
# DSB_SERVICE_MYSQL=mysql
# DSB_SERVICE_NODE=node
# DSB_SERVICE_PHP=php
# DSB_SERVICE_POSTGRES=postgres
# DSB_SERVICE_REDIS=redis
# DSB_SERVICE_RUBY=ruby
# DSB_SERVICE_PYTHON=python
# DSB_SERVICE_PYTHON2=python2
# DSB_SERVICE_PYTHON3=python3
" > "$MYBOX/compose/$DSBLIB_DSBENV"

dsb_exec rm -f "$MYBOX/compose/.gitkeep"
dsb_exec chmod -R u+rX   "$MYBOX"
dsb_exec chmod -R go-rwx "$MYBOX"

dsb_green_message "Directory '$MYBOX' is initialized"
dsblib_exit